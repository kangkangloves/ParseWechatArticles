@page "/wechatarticles"
@using ParseWechatArticles.Data
@using AngleSharp
@using AngleSharp.Html.Dom
@using AngleSharp.Dom
@using UglyToad.PdfPig
@using UglyToad.PdfPig.Content
@using UglyToad.PdfPig.Core
@using UglyToad.PdfPig.Writer
@using System.Net.Mime
@using System.Drawing
@using System.Drawing.Imaging
@inject HttpClient Http

<PageTitle>Wechat Articles Parser</PageTitle>

<h1>Wechat Articles Parser</h1>
<h2>暂时还没写CSS，将就着看吧qwq</h2>
<a href="@debug">@debug</a><br>
<input @bind="inputPath"/>
<button @onclick="GetImages">预览&获取PDF</button><br>

@if (imgSrcs == null) {
    <p>图片预览区</p>
} 
else {
    @foreach (var img in imgSrcs) {
        <img src="@img">
    }
}

@code {

        private const string IMG_DIR = "imgs";
        private const string BEHIND_IMG_DIR = $"wwwroot/{IMG_DIR}";
        private const string PDF_DIR = "pdfs";
        private const string BEHIND_PDF_DIR = $"wwwroot/{PDF_DIR}";
    private string? inputPath;
    private string? debug = "不要重复点击按钮！";
    private List<string> imgSrcs;

    private async Task GetImages()
    {
        if (inputPath == null)
        {
            debug = "请先输入正确的地址！不要重复点击按钮！";
            return;
        }
        debug = "请稍后，这里马上会出现PDF链接！不要重复点击按钮！";
    //https://mp.weixin.qq.com/s/rPR7AnnbtIRMQ3opXy2hzA
        var htmlRes = await Http.GetAsync(inputPath);
        var htmlRaw = await htmlRes.Content.ReadAsStringAsync();

        IConfiguration config = Configuration.Default;
        IBrowsingContext context = BrowsingContext.New(config);
        IDocument document = await context.OpenAsync(req => req.Content(htmlRaw));

        var imgElements = document.GetElementsByTagName("img")
            .Where(e => e.GetAttribute("data-type") == "jpg" 
                        || e.GetAttribute("data-type") == "jpeg"
                        || e.GetAttribute("data-type") == "png")
            .ToList();
        var title = document.GetElementsByTagName("h1").FirstOrDefault().Text()
            .Replace(" ", "").Replace("\n", "");
        imgSrcs = new List<string> { };
        foreach (var imgElement in imgElements)
        {
            var imgSrc = imgElement.GetAttribute(("data-src"));
            var imgName = imgSrc.Split('/')[imgSrc.Split('/').Length - 2];
            if (!Directory.Exists(BEHIND_IMG_DIR))
            {
                Directory.CreateDirectory(BEHIND_IMG_DIR);
            }
            if (!File.Exists($"{BEHIND_IMG_DIR}/{imgName}.jpg"))
            {
                var imgBytes = await Http.GetByteArrayAsync(imgSrc);
                var img = Image.FromStream(new MemoryStream(imgBytes));
                img.Save($"{BEHIND_IMG_DIR}/{imgName}.jpg", ImageFormat.Jpeg);
            }
            imgSrcs.Add($"{IMG_DIR}/{imgName}.jpg");
        }
        if (!File.Exists($"{BEHIND_PDF_DIR}/{title}.pdf"))
        {
            PdfDocumentBuilder pdfDocumentBuilder = new PdfDocumentBuilder();
            foreach (var imgElement in imgElements)
            {
                var imgSrc = imgElement.GetAttribute(("data-src"));
                var imgName = imgSrc.Split('/')[imgSrc.Split('/').Length - 2];
                var imgObject = Image.FromFile($"{BEHIND_IMG_DIR}/{imgName}.jpg");
                var imgJPEGBytes = await File.ReadAllBytesAsync($"{BEHIND_IMG_DIR}/{imgName}.jpg");
                var imgStream = new MemoryStream(imgJPEGBytes);
                PdfPageBuilder page = pdfDocumentBuilder.AddPage(imgObject.Width, imgObject.Height);
                page.AddJpeg(imgStream);
            }
            if (!Directory.Exists(BEHIND_PDF_DIR))
            {
                Directory.CreateDirectory(BEHIND_PDF_DIR);
            }
            byte[] documentBytes = pdfDocumentBuilder.Build();
            await File.WriteAllBytesAsync($"{BEHIND_PDF_DIR}/{title}.pdf", documentBytes);
        }
        debug = $"{PDF_DIR}/{title}.pdf";
    }

    private async Task CreatePDF()
    {
        
    }

    protected override async Task OnInitializedAsync()
    {

    }
    
}
